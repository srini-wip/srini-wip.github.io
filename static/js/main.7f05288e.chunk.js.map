{"version":3,"sources":["09_composableComponents/components/Comment.js","09_composableComponents/components/CommentList.js","09_composableComponents/data/CommentData.js","09_composableComponents/data/CommentApi.js","09_composableComponents/components/AllCommentsPage.js","09_composableComponents/App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Comment","this","props","author","children","React","Component","CommentList","commentNodes","comments","map","comment","text","id","CommentApi","CommentData","AllCommentsPage","state","setState","getAllComments","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.7f05288e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Comment extends React.Component {\r\n  render() {\r\n    return (\r\n        <tr>\r\n          <td>{this.props.author}</td>\r\n          <td>{this.props.children}</td>\r\n        </tr>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Comment from './Comment';\r\n\r\nexport default class CommentList extends React.Component {\r\n  render () {\r\n    let commentNodes = this.props.comments.map(comment => (\r\n        <Comment key={comment.id} author={comment.author} >\r\n          {comment.text}\r\n        </Comment>\r\n    ));\r\n    return (\r\n      <>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Author</th>\r\n              <th>Comment</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {commentNodes}\r\n          </tbody>\r\n        </table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","export default {\r\n  comments:\r\n  [\r\n    {\r\n      \"id\": 1,\r\n      \"author\": \"Ram\",\r\n      \"text\": \"React is simple\"\r\n    },\r\n    {\r\n      \"id\": 2,\r\n      \"author\": \"Raj\",\r\n      \"text\": \"React is fast\"\r\n    },\r\n    {\r\n      \"id\": 3,\r\n      \"author\": \"Vinay\",\r\n      \"text\": \"React can be used to develop SPA\"\r\n    }\r\n  ]\r\n};\r\n","import CommentData from './CommentData';\r\n\r\nexport default class CommentApi {\r\n\tstatic getAllComments() {\r\n\t    return CommentData.comments;\r\n\t}\r\n}\r\n","import React from \"react\";\r\nimport CommentList from \"./CommentList\";\r\nimport CommentApi from \"../data/CommentApi\";\r\n\r\nexport default class AllCommentsPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            comments: []\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.setState({ comments: CommentApi.getAllComments() });\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                <h1>Comments</h1>\r\n                <CommentList comments={this.state.comments} />\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport AllCommentsPage from './components/AllCommentsPage';\r\n\r\nexport default class App extends React.Component {\r\n    render() {\r\n        return (\r\n            <AllCommentsPage/>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n\nimport './myindex.css';\nimport App from './09_composableComponents/App';\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}